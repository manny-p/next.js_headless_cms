{"version":3,"sources":["../../src/button.tsx"],"names":["mergeRefs","Spinner","chakra","forwardRef","omitThemingProps","useStyleConfig","cx","dataAttr","mergeWith","__DEV__","React","useButtonGroup","Button","props","ref","group","styles","isDisabled","isLoading","isActive","isFullWidth","children","leftIcon","rightIcon","loadingText","iconSpacing","type","spinner","spinnerPlacement","className","as","rest","_focus","zIndex","buttonStyles","display","appearance","alignItems","justifyContent","userSelect","position","whiteSpace","verticalAlign","outline","width","_ref","defaultType","useButtonType","displayName","value","isButton","setIsButton","useState","refCallback","useCallback","node","tagName","undefined","ButtonIcon","_children","isValidElement","cloneElement","focusable","_className","ButtonSpinner","label","placement","__css","marginProp","spinnerStyles","fontSize","lineHeight"],"mappings":"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","sourcesContent":["import { mergeRefs } from \"@chakra-ui/react-utils\"\nimport { Spinner } from \"@chakra-ui/spinner\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr, mergeWith, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useButtonGroup } from \"./button-group\"\n\nexport interface ButtonOptions {\n  /**\n   * If `true`, the button will show a spinner.\n   */\n  isLoading?: boolean\n  /**\n   * If `true`, the button will be styled in its active state.\n   */\n  isActive?: boolean\n  /**\n   * If `true`, the button will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * The label to show in the button when `isLoading` is true\n   * If no text is passed, it only shows the spinner\n   */\n  loadingText?: string\n  /**\n   * If `true`, the button will take up the full width of its container.\n   */\n  isFullWidth?: boolean\n  /**\n   * The html button type to use.\n   */\n  type?: \"button\" | \"reset\" | \"submit\"\n  /**\n   * If added, the button will show an icon before the button's label.\n   * @type React.ReactElement\n   */\n  leftIcon?: React.ReactElement\n  /**\n   * If added, the button will show an icon after the button's label.\n   * @type React.ReactElement\n   */\n  rightIcon?: React.ReactElement\n  /**\n   * The space between the button icon and label.\n   * @type SystemProps[\"marginRight\"]\n   */\n  iconSpacing?: SystemProps[\"marginRight\"]\n  /**\n   * Replace the spinner component when `isLoading` is set to `true`\n   * @type React.ReactElement\n   */\n  spinner?: React.ReactElement\n  /**\n   * It determines the placement of the spinner when isLoading is true\n   * @default \"start\"\n   */\n  spinnerPlacement?: \"start\" | \"end\"\n}\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps<\"Button\"> {}\n\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    isFullWidth,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const _focus = mergeWith({}, styles?.[\"_focus\"] ?? {}, { zIndex: 1 })\n\n  const buttonStyles: SystemStyleObject = {\n    display: \"inline-flex\",\n    appearance: \"none\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    userSelect: \"none\",\n    position: \"relative\",\n    whiteSpace: \"nowrap\",\n    verticalAlign: \"middle\",\n    outline: \"none\",\n    width: isFullWidth ? \"100%\" : \"auto\",\n    ...styles,\n    ...(!!group && { _focus }),\n  }\n\n  const { ref: _ref, type: defaultType } = useButtonType(as)\n\n  return (\n    <chakra.button\n      disabled={isDisabled || isLoading}\n      ref={mergeRefs(ref, _ref)}\n      as={as}\n      type={type ?? defaultType}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n    >\n      {leftIcon && !isLoading && (\n        <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>\n      )}\n\n      {isLoading && spinnerPlacement === \"start\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--start\"\n          label={loadingText}\n          placement=\"start\"\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n\n      {isLoading\n        ? loadingText || <chakra.span opacity={0}>{children}</chakra.span>\n        : children}\n\n      {isLoading && spinnerPlacement === \"end\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--end\"\n          label={loadingText}\n          placement=\"end\"\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n      {rightIcon && !isLoading && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </chakra.button>\n  )\n})\n\nif (__DEV__) {\n  Button.displayName = \"Button\"\n}\n\nfunction useButtonType(value?: React.ElementType) {\n  const [isButton, setIsButton] = React.useState(!value)\n  const refCallback = React.useCallback((node: HTMLElement | null) => {\n    if (!node) return\n    setIsButton(node.tagName === \"BUTTON\")\n  }, [])\n  const type = isButton ? \"button\" : undefined\n  return { ref: refCallback, type } as const\n}\n\nconst ButtonIcon: React.FC<HTMLChakraProps<\"span\">> = (props) => {\n  const { children, className, ...rest } = props\n\n  const _children = React.isValidElement(children)\n    ? React.cloneElement(children, {\n        \"aria-hidden\": true,\n        focusable: false,\n      })\n    : children\n\n  const _className = cx(\"chakra-button__icon\", className)\n\n  return (\n    <chakra.span\n      display=\"inline-flex\"\n      alignSelf=\"center\"\n      flexShrink={0}\n      {...rest}\n      className={_className}\n    >\n      {_children}\n    </chakra.span>\n  )\n}\n\nif (__DEV__) {\n  ButtonIcon.displayName = \"ButtonIcon\"\n}\n\ninterface ButtonSpinnerProps extends HTMLChakraProps<\"div\"> {\n  label?: string\n  /**\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  placement?: \"start\" | \"end\"\n}\n\nconst ButtonSpinner: React.FC<ButtonSpinnerProps> = (props) => {\n  const {\n    label,\n    placement,\n    spacing,\n    children = <Spinner color=\"currentColor\" width=\"1em\" height=\"1em\" />,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__spinner\", className)\n\n  const marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\"\n\n  const spinnerStyles: SystemStyleObject = {\n    display: \"flex\",\n    alignItems: \"center\",\n    position: label ? \"relative\" : \"absolute\",\n    [marginProp]: label ? \"0.5rem\" : 0,\n    fontSize: \"1em\",\n    lineHeight: \"normal\",\n    ...__css,\n  }\n\n  return (\n    <chakra.div className={_className} {...rest} __css={spinnerStyles}>\n      {children}\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  ButtonSpinner.displayName = \"ButtonSpinner\"\n}\n"],"file":"button.js"}